{
  parserClass="com.alacsplugin.parser.AlacsParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Alacs"
  psiImplClassSuffix="Impl"
  psiPackage="com.alacsplugin.psi.api"
  psiImplPackage="com.alacsplugin.psi.impl"

  elementTypeHolderClass="com.alacsplugin.psi.AlacsTypes"
  elementTypeClass="com.alacsplugin.psi.AlacsElementType"
  tokenTypeClass="com.alacsplugin.psi.AlacsTokenType"

  tokens=[
    characterLiteralRE  = "regexp:\'[a-zA-Z]\'"
    stringLiteralRE     = "regexp:\"[a-zA-Z ]*\""

    //UPPER				=  'regexp:[A-Z]'
    //LOWER				=  'regexp:[a-z]'
    CRLF				=  'regexp:(\n|\r|\r\n)'
    //ZERO				=  '0'
    //NONZERODIGIT		=  'regexp:[1-9]'
    LEFT_BRACE			=  "{"
    RIGHT_BRACE			=  "}"
    LEFT_BRACKET		=  "["
    RIGHT_BRACKET		=  "]"
    LEFT_PAREN			=  "("
    RIGHT_PAREN			=  ")"
    SEMICOLON			=  ";"
    DOT				    =  "."
    COMMA				=  ","
    Q_MARK				=  '"'
    Q_MARK_2			=  "'"
    COLON				=  ":"
    UNDERSCORE			=  "_"
    EQ				    =  '='
    TO				    =  '=>'
    LARROW				=  '<-'
    LL				    =  '<:'
    RR				    =  '>:'
    SHARP				=  '#'
    AT				    =  '@'
    LLL				    =  '<%'
    SLASH				=  '\'
    ABSTRACT			=  "abstract"
    CASE				=  "case"
    CATCH				=  "catch"
    CLASS				=  "class"
    DEF				    =  "def"
    DO				    =  "do"
    ELSE				=  "else"
    EXTENDS				=  "extends"
    FALSE				=  "false"
    FINAL				=  "final"
    FINALLY				=  "finally"
    FOR				    =  "for"
    FORSOME				=  "forSome"
    IF				    =  "if"
    IMPLICIT			=  "implicit"
    IMPORT				=  "import"
    LAZY				=  "lazy"
    MACRO				=  "macro"
    MATCH				=  "match"
    NEW				    =  "new"
    NULL				=  "null"
    OBJECT				=  "object"
    OVERRIDE			=  "override"
    PACKAGE				=  "package"
    PRIVATE				=  "private"
    PROTECTED			=  "protected"
    RETURN				=  "return"
    SEALED				=  "sealed"
    SUPER				=  "super"
    THIS				=  "this"
    THROW				=  "throw"
    TRAIT				=  "trait"
    TRY				    =  "try"
    TRUE				=  "true"
    TYPE				=  "type"
    VAL				    =  "val"
    VAR				    =  "var"
    WHILE				=  "while"
    WITH				=  "with"
    YIELD				=  "yield"


    hexNumeral          =  'regexp:0[xX][0-9a-fA-F]+'
    decimalNumeral      =  'regexp:(0|[1-9][0-9]*)'
    floatingPointLiteral=  'regexp:[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?'

    OP_1				=  '+'
    OP_2				=  '-'
    OP_3				=  '*'
    OP_4				=  '/'
    EPT				    =  '!'
    TLD				    =  '~'

    plainid_regex       =  "regexp:[A-Z]([0-9a-zA-Z]*)(_[^a-zA-Z0-9()\[\]{}\.;,\s\'\"]+)?"
    varid_regex         =  "regexp:[a-z]([0-9a-zA-Z]*)(_[^a-zA-Z0-9()\[\]{}\.;,\s\'\"]+)?"
    op_regex            =  "regexp:[^a-zA-Z0-9()\[\]{}\.;,\s\'\"]+"


    COMMENT				=  'regexp://.*'
    ANY				    =  'regexp:.'
  ]

}
Program          ::= BlockExpr                                              // Start Symbol - BlockExpr ???

//digit            ::=  decimalNumeral //ZERO | NONZERODIGIT
//letter           ::=  UPPER | LOWER
/*paren            ::=  '(' | ')' | '[' | ']' | '{' | '}'
delim            ::=  "'" | '"' | '.' | ';' | ','
opchar           ::=  (!UPPER | !LOWER | !digit | !paren | !delim) any //(!SPACE | !UPPER | !LOWER | !digit | !paren | !delim) any*/
//printableChar    ::= // all characters in [\u0020, \u007F] inclusive
//charEscapeSeq    ::= '\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\')

op               ::=  OP_1
                 | OP_2
                 | OP_3
                 | OP_4
                 | EPT
                 | TLD
                 | op_regex             //opchar {opchar} *

varid            ::=  varid_regex       //LOWER idrest
plainid          ::=  plainid_regex     //UPPER idrest
                 |  varid
                 |  op
id               ::=  plainid
                 //|  "'" stringLiteral "'"
//idrest           ::=  {letter | digit} * ['_' op]

integerLiteral   ::=  (decimalNumeral | hexNumeral) 

booleanLiteral   ::=  'true' | 'false'

characterLiteral ::=  characterLiteralRE //"'" letter "'"                        // (charNoQuoteOrNewline | UnicodeEscape | charEscapeSeq) -> letter
stringLiteral    ::=  stringLiteralRE
/*stringLiteral    ::=  '"' {stringElement} * '"'
                 |  '"""' multiLineChars '"""'*/
//stringElement    ::=  letter                                // charNoDoubleQuoteOrNewline | UnicodeEscape | charEscapeSeq -> letter
//multiLineChars   ::=  {['"'] ['"'] letter} * {'"'} *        // charNoDoubleQuote -> letter

symbolLiteral    ::=  "'" plainid

nl               ::=  CRLF


semi             ::=  ';' |  nl {nl} *

Literal           ::=  '-' integerLiteral
                  |  integerLiteral
                  |  '-' floatingPointLiteral
                  |  floatingPointLiteral
                  |  booleanLiteral
                  |  characterLiteral
                  |  stringLiteral
                  |  symbolLiteral
                  |  'null'

QualId            ::=  id {'.' id} *
ids               ::=  id {',' id} *
//-----------------------------------------------------------------
/*Path            ::=  StableId
                  |  [id ‘.’] ‘this’
StableId          ::=  id
                  |  Path ‘.’ id
                  |  [id ‘.’] ‘super’ [ClassQualifier] ‘.’ id*/

Path              ::=	StableId
                  |	 id '.' 'this'
                  |	 'this'

StableId          ::=  id StableId1
                  |	 id '.' 'this' '.' id StableId1
                  |	 'this' '.' id StableId1
                  |	 id '.' 'super' ClassQualifier '.' id StableId1
                  |	 'super' ClassQualifier '.' id StableId1
                  |	 id '.' 'super' '.' id StableId1
                  |	 'super' '.' id StableId1
                  |	 id '.' 'this' '.' id
                  |	 'this' '.' id
                  |	 id '.' 'super' ClassQualifier '.' id
                  |	 'super' ClassQualifier '.' id
                  |	 id '.' 'super' '.' id
                  |	 'super' '.' id
                  |  id

StableId1         ::=  '.' id StableId1
                  |  '.' id
//-----------------------------------------------------------------
ClassQualifier    ::=  '[' id ']'

Type_             ::=  FunctionArgTypes '=>' Type_
                  |  InfixType [ExistentialClause]
FunctionArgTypes  ::= InfixType
                  | '(' [ ParamType {',' ParamType } * ] ')'
ExistentialClause ::=  'forSome' '{' ExistentialDcl {semi ExistentialDcl} * '}'
ExistentialDcl    ::=  'type' TypeDcl
                  |  'val' ValDcl
InfixType         ::=  CompoundType {id [nl] CompoundType} *
CompoundType      ::=  AnnotType {'with' AnnotType} * [Refinement]
                  |  Refinement
AnnotType         ::=  SimpleType {Annotation} *
//-----------------------------------------------------------------
/*SimpleType        ::=  SimpleType TypeArgs
                  |  SimpleType '#' id
                  |  StableId
                  |  Path '.' 'type'
                  |  '(' Types ')'*/
SimpleType        ::=  StableId SimpleType_
                  |  Path '.' 'type' SimpleType_
                  |  '(' Types ')' SimpleType_
                  |  StableId
                  |  Path '.' 'type'
                  |  '(' Types ')'
SimpleType_	      ::= TypeArgs SimpleType_
                  | '#' id SimpleType_
                  | TypeArgs
                  | '#' id
//-----------------------------------------------------------------
TypeArgs          ::=  '[' Types ']'
Types             ::=  Type_ {',' Type_} *

//commit f2b00a----------------------------------------------------
/*Refinement        ::=  [nl] '{' RefineStat {semi RefineStat} * '}'
RefineStat        ::=  Dcl
                  |  'type' TypeDef
                  |*/
Refinement        ::=  [nl] '{' RefineStat Refinement_ '}'
                  |  [nl] '{' RefineStat '}'
                  |  [nl] '{' Refinement_ '}'
                  |  [nl] '{' '}'

Refinement_	      ::=  semi + RefineStat Refinement_
                  |  semi + RefineStat
                  |  semi +


RefineStat        ::=  Dcl
                  |  'type' TypeDef
//-----------------------------------------------------------------

TypePat           ::=  Type_

Ascription        ::=  ':' InfixType
                  |  ':' Annotation {Annotation} *
                  |  ':' '_' '*'

Expr              ::=  (Bindings | ['implicit'] id | '_') '=>' Expr
                  |  Expr1
Expr1             ::=  'if' '(' Expr ')' {nl} * Expr [[semi] 'else' Expr]
                  |  'while' '(' Expr ')' {nl} * Expr
                  |  'try' ('{' Block '}' | Expr) ['catch' '{' CaseClauses '}'] ['finally' Expr]
                  |  'try' ('{' '}' | Expr) ['catch' '{' CaseClauses '}'] ['finally' Expr]
                  |  'do' Expr [semi] 'while' '(' Expr ')'
                  |  'for' ('(' Enumerators ')' | '{' Enumerators '}') {nl} * ['yield'] Expr
                  |  'throw' Expr
                  |  'return' [Expr]
                  |  [SimpleExpr '.'] id '=' Expr
                  |  SimpleExpr1_ '=' Expr // old: SimpleExpr1 ArgumentExprs '=' Expr
                  |  PostfixExpr 'match' '{' CaseClauses '}'
                  |  PostfixExpr Ascription
                  |  PostfixExpr
PostfixExpr       ::=  InfixExpr [id [nl]]
//-----------------------------------------------------------------
/*InfixExpr         ::=  PrefixExpr
                  |  InfixExpr id [nl] InfixExpr*/
InfixExpr         ::= PrefixExpr InfixExpr_
                  |  PrefixExpr
InfixExpr_	      ::= id [nl] InfixExpr InfixExpr_
                  |  id [nl] InfixExpr
//-----------------------------------------------------------------

PrefixExpr        ::=  ['-' | '+' | '~' | '!'] SimpleExpr

//commit 6d297d----------------------------------------------------
/*SimpleExpr        ::=  'new' (ClassTemplate | TemplateBody)
                  |  BlockExpr
                  |  SimpleExpr1 ['_']
SimpleExpr1       ::=  Literal
                  |  Path
                  |  '_'
                  |  '(' [Exprs] ')'
                  |  SimpleExpr '.' id
                  |  SimpleExpr TypeArgs
                  |  SimpleExpr1 ArgumentExprs
                  //|  XmlExpr  */                                                                                      //!!!
SimpleExpr        ::=	'new' (ClassTemplate | TemplateBody)
                  |	BlockExpr
                  |	SimpleExpr1 ['_']

SimpleExpr1       ::=	Literal SimpleExpr2
                  |	Literal
                  |	Path SimpleExpr2
                  |	Path
                  |	'_' SimpleExpr2
                  |	'_'
                  |	'(' ')' SimpleExpr2
                  |	'(' ')'
                  |	'(' Exprs ')' SimpleExpr2
                  |	'(' Exprs ')'
                  |	'new' (ClassTemplate '.' id | 'new' (ClassTemplate '.' id SimpleExpr2 | TemplateBody) '.' id | TemplateBody) '.' id SimpleExpr2
                  |	BlockExpr '.' id SimpleExpr2
                  |	BlockExpr '.' id
                  |	'new' (ClassTemplate TypeArgs |	'new' (ClassTemplate TypeArgs SimpleExpr2 | TemplateBody) TypeArgs | TemplateBody) TypeArgs SimpleExpr2
                  |	BlockExpr TypeArgs SimpleExpr2
                  |	BlockExpr TypeArgs

SimpleExpr2       ::=  '.' id SimpleExpr2
                  |	'.' id
                  |	'_' '.' id SimpleExpr2
                  |	'_' '.' id
                  |	TypeArgs SimpleExpr2
                  |	TypeArgs
                  |	'_' TypeArgs SimpleExpr2
                  |	'_' TypeArgs
                  |	ArgumentExprs SimpleExpr2
                  |	ArgumentExprs

/*
    rule for SimpleExpr1 followed by ArgumentExprs
 */
SimpleExpr1_       ::=	Literal SimpleExpr2_
                  |	Path SimpleExpr2_
                  |	'_' SimpleExpr2_
                  |	'(' ')' SimpleExpr2_
                  |	'(' Exprs ')' SimpleExpr2_
                  |	'new' (ClassTemplate '.' id | 'new' (ClassTemplate '.' id SimpleExpr2_ | TemplateBody) '.' id | TemplateBody) '.' id SimpleExpr2_
                  |	BlockExpr '.' id SimpleExpr2_
                  |	'new' (ClassTemplate TypeArgs |	'new' (ClassTemplate TypeArgs SimpleExpr2_ | TemplateBody) TypeArgs | TemplateBody) TypeArgs SimpleExpr2_
                  |	BlockExpr TypeArgs SimpleExpr2_

SimpleExpr2_       ::=  '.' id SimpleExpr2_
                  |	'_' '.' id SimpleExpr2_
                  |	TypeArgs SimpleExpr2_
                  |	'_' TypeArgs SimpleExpr2_
                  |	ArgumentExprs SimpleExpr2_
                  |	ArgumentExprs

//-----------------------------------------------------------------
Exprs             ::=  Expr {',' Expr} *
ArgumentExprs     ::=  '(' [Exprs] ')'
                  |  '(' [Exprs ','] PostfixExpr ':' '_' '*' ')'
                  |  [nl] BlockExpr
BlockExpr         ::=  '{' CaseClauses '}'
                  |  '{' Block '}'
                  |  '{' '}'
//commit 6d297d----------------------------------------------------
/*Block             ::=  BlockStat {semi BlockStat} * [ResultExpr]
BlockStat         ::=  Import_
                  |  {Annotation} * ['implicit' | 'lazy'] Def_
                  |  {Annotation} * {LocalModifier} * TmplDef
                  |  Expr1
                  |*/
Block             ::=  BlockStat Block_ [ResultExpr]
                  |  BlockStat [ResultExpr]
                  |  Block_ [ResultExpr]

Block_            ::=  semi + BlockStat Block_
                  |  semi + BlockStat
                  |  semi +

BlockStat         ::=  Import_
                  |  {Annotation} * ['implicit' | 'lazy'] Def_
                  |  {Annotation} * {LocalModifier} * TmplDef
                  |  Expr1
//-----------------------------------------------------------------
ResultExpr        ::=  Expr1
                  |  (Bindings | (['implicit'] id | '_') ':' CompoundType) '=>' Block
                  |  (Bindings | (['implicit'] id | '_') ':' CompoundType) '=>'

Enumerators       ::=  Generator {semi Generator} *
Generator         ::=  Pattern1 '<-' Expr {[semi] Guard | semi Pattern1 '=' Expr} *

CaseClauses       ::=  CaseClause { CaseClause } *
CaseClause        ::=  'case' Pattern [Guard] '=>' Block
                  |  'case' Pattern [Guard] '=>'
Guard             ::=  'if' PostfixExpr

Pattern           ::=  Pattern1 { '|' Pattern1 } *
Pattern1          ::=  varid ':' TypePat
                  |  '_' ':' TypePat
                  |  Pattern2
Pattern2          ::=  varid ['@' Pattern3]
                  |  Pattern3
Pattern3          ::=  SimplePattern { id [nl] SimplePattern } *
                  |  SimplePattern
SimplePattern     ::=  '_'
                  |  StableId '(' [Patterns ','] [varid '@'] '_' '*' ')'
                  |  StableId '(' [Patterns] ')'
                  |  StableId
                  |  '(' [Patterns] ')'
                  |  varid
                  |  Literal
                  //|  XmlPattern                                                                                       //!!!
Patterns          ::=  Pattern [',' Patterns]
                  |  '_' *

TypeParamClause   ::=  '[' VariantTypeParam {',' VariantTypeParam} * ']'
FunTypeParamClause::=  '[' TypeParam {',' TypeParam} * ']'
VariantTypeParam  ::=  {Annotation} * ['+' | '-'] TypeParam
TypeParam         ::=  (id | '_') [TypeParamClause] ['>:' Type_] ['<:' Type_]
                     {'<%' Type_} * {':' Type_} *
ParamClauses      ::=  {ParamClause} * [[nl] '(' 'implicit' Params ')']
ParamClause       ::=  [nl] '(' [Params] ')'
Params            ::=  Param {',' Param} *
Param             ::=  {Annotation} * id [':' ParamType] ['=' Expr]
//-----------------------------------------------------------------
/*ParamType         ::=  Type_
                  |  '=>' Type_
                  |  Type_ '*'*/

ParamType         ::=  Type_ '*'
                  |  '=>' Type_
                  |  Type_
//-----------------------------------------------------------------
ClassParamClauses ::=  {ClassParamClause} * [[nl] '(' 'implicit' ClassParams ')']
ClassParamClause  ::=  [nl] '(' [ClassParams] ')'
ClassParams       ::=  ClassParam {',' ClassParam} *
ClassParam        ::=  {Annotation} * {Modifier} * [('val' | 'var')]
                     id ':' ParamType ['=' Expr]
Bindings          ::=  '(' Binding {',' Binding} * ')'
Binding           ::=  (id | '_') [':' Type_]

Modifier          ::=  LocalModifier
                  |  AccessModifier
                  |  'override'
LocalModifier     ::=  'abstract'
                  |  'final'
                  |  'sealed'
                  |  'implicit'
                  |  'lazy'
AccessModifier    ::=  ('private' | 'protected') [AccessQualifier]
AccessQualifier   ::=  '[' (id | 'this') ']'

Annotation        ::=  '@' SimpleType {ArgumentExprs} *
ConstrAnnotation  ::=  '@' SimpleType ArgumentExprs
//commit f2b00a----------------------------------------------------
/*TemplateBody      ::=  [nl] '{' [SelfType] TemplateStat {semi TemplateStat} * '}'
TemplateStat      ::=  Import_
                  |  {Annotation [nl]} * {Modifier} * Def_
                  |  {Annotation [nl]} * {Modifier} * Dcl
                  |  Expr
                  |*/
TemplateBody      ::=  [nl] '{' [SelfType] TemplateStat {semi TemplateStat} * '}'
                  |  [nl] '{' [SelfType] {semi TemplateStat} * '}'
                  |  [nl] '{' [SelfType] TemplateStat {semi} * '}'
                  |  [nl] '{' [SelfType] {semi} * '}'
TemplateStat      ::=  Import_
                  |  {Annotation [nl]} * {Modifier} * Def_
                  |  {Annotation [nl]} * {Modifier} * Dcl
                  |  Expr
//-----------------------------------------------------------------
SelfType          ::=  id [':' Type_] '=>'
                  |  'this' ':' Type_ '=>'

Import_            ::=  'import' ImportExpr {',' ImportExpr} *
ImportExpr        ::=  StableId '.' (id | '_' | ImportSelectors)
ImportSelectors   ::=  '{' {ImportSelector ','} * (ImportSelector | '_') '}'
ImportSelector    ::=  id ['=>' id | '=>' '_']

Dcl               ::=  'val' ValDcl
                  |  'var' VarDcl
                  |  'def' FunDcl
                  |  'type' {nl} * TypeDcl

ValDcl            ::=  ids ':' Type_
VarDcl            ::=  ids ':' Type_
FunDcl            ::=  FunSig [':' Type_]
FunSig            ::=  id [FunTypeParamClause] ParamClauses
TypeDcl           ::=  id [TypeParamClause] ['>:' Type_] ['<:' Type_]

PatVarDef         ::=  'val' PatDef
                  |  'var' VarDef
Def_               ::=  PatVarDef
                  |  'def' FunDef
                  |  'type' {nl} * TypeDef
                  |  TmplDef
PatDef            ::=  Pattern2 {',' Pattern2} * [':' Type_] '=' Expr
VarDef            ::=  PatDef
                  |  ids ':' Type_ '=' '_'
FunDef            ::=  FunSig [':' Type_] '=' Expr
                  |  FunSig [nl] '{' Block '}'
                  |  FunSig [nl] '{' '}'
                  |  'this' ParamClause ParamClauses
                     ('=' ConstrExpr | [nl] ConstrBlock)
TypeDef           ::=  id [TypeParamClause] '=' Type_

TmplDef           ::=  ['case'] 'class' ClassDef
                  |  ['case'] 'object' ObjectDef
                  |  'trait' TraitDef
ClassDef          ::=  id [TypeParamClause] {ConstrAnnotation} * [AccessModifier]
                     ClassParamClauses ClassTemplateOpt
TraitDef          ::=  id [TypeParamClause] TraitTemplateOpt
ObjectDef         ::=  id ClassTemplateOpt
ClassTemplateOpt  ::=  'extends' ClassTemplate
                  | [['extends'] TemplateBody]
TraitTemplateOpt  ::=  'extends' TraitTemplate
                  | [['extends'] TemplateBody]
ClassTemplate     ::=  [EarlyDefs] ClassParents [TemplateBody]
TraitTemplate     ::=  [EarlyDefs] TraitParents [TemplateBody]
ClassParents      ::=  Constr {'with' AnnotType} *
TraitParents      ::=  AnnotType {'with' AnnotType} *
Constr            ::=  AnnotType {ArgumentExprs} *
EarlyDefs         ::= '{' [EarlyDef {semi EarlyDef} * ] '}' 'with'
EarlyDef          ::=  {Annotation [nl]} * {Modifier} * PatVarDef

ConstrExpr        ::=  SelfInvocation
                  |  ConstrBlock
//commit 6d297d----------------------------------------------------
/*ConstrBlock       ::=  '{' SelfInvocation {semi BlockStat} * '}'*/
ConstrBlock       ::=  '{' SelfInvocation {semi [BlockStat]} * '}'
//-----------------------------------------------------------------

SelfInvocation    ::=  'this' ArgumentExprs {ArgumentExprs} *

//commit f2b00a----------------------------------------------------
/*TopStatSeq        ::=  TopStat {semi TopStat} *
TopStat           ::=  {Annotation [nl]} * {Modifier} * TmplDef
                  |  Import_
                  |  Packaging
                  |  PackageObject
                  |
Packaging         ::=  'package' QualId [nl] '{' TopStatSeq '}'
PackageObject     ::=  'package' 'object' ObjectDef

CompilationUnit   ::=  {'package' QualId semi} * TopStatSeq*/


TopStatSeq        ::=  TopStat TopStatSeq_
                  |  TopStat
                  |  TopStatSeq_

TopStatSeq_       ::=  semi + TopStat TopStatSeq_
                  |  semi + TopStat
                  |  semi +

TopStat           ::=  {Annotation [nl]} * {Modifier} * TmplDef
                  |  Import_
                  |  Packaging
                  |  PackageObject

Packaging         ::=  'package' QualId [nl] '{' TopStatSeq '}'
                  |  'package' QualId [nl] '{' '}'

PackageObject     ::=  'package' 'object' ObjectDef

CompilationUnit   ::=  {'package' QualId semi} * TopStatSeq
                  |  {'package' QualId semi} *
//-----------------------------------------------------------------

