package org.jetbrains.plugins.scala.editor.importOptimizer

import junit.framework.TestCase
import org.jetbrains.plugins.scala.editor.importOptimizer.ScalaImportOptimizer._
import org.junit.Assert

class ImportTextCreatorTest extends TestCase {
     def testNested() {
        val text = """ class A $ST{
            |  1 match $ST{
            |    case 1 => $ST{
            |      //azaza
            |    }$END
            |  }$END
            |
            |  object Azazaible $ST{
            |    for (i <- 1 to 10) $ST{
            |      println("azaza!")
            |    }$END
            |  }$END
            |
            |  def boo() $ST{
            |    if (true) $ST{
            |      //azaza
            |    }$END
            |  }$END
            | }$END
          """.stripMargin.replace("\r", "")

        genericCheckRegions(text)
    }

    def foo() {
            //for(x <- e; y <- e'; s) yield e''
            val name = "James"
            println("Hello, $name")  // Hello, James
    }

    def testBlock() {
        doTest("""{
      val a = new df
      val agaga =  agadg+"/"+aa
      val agd = try {
        ag.agd.adgasdg(asgadg, false, ag)
      } catch {
        d:
      }
      val adg = asdgasdg(adgasdg.asdg(asdg))
      asdg.asdg.adsg(asdgasdg,-1)
      asdg
    }""")
    }

    def sum(xs: List[Int])      =  (0 :: xs) reduceLeft {(x, y) => x + y}
    def product(xs: List[Int])  =  (1 :: xs) reduceLeft {(x, y) => x * y}
}