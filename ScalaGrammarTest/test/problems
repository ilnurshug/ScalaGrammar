OPEN PROBLEMS:

1)
    DESCRIPTION: 
        "// {" - should be recognised as comment, but not as part of id "+..." 
        если поставить пробел, то все нормально
    CODE:
        {
        object O {
                val x =  x+// {
                }
        }
        object O {
            def x: Q.type#/* line: 2 */Inner 
        }
        object O {
          val x = (x +/* */ 1)
        }
2)
    DESCRIPTION:
        problem with =>
    CODE:
        {
            object Foo{
                val a = (null): Int => Int
            }
        }
        object X{
          {
            ((newEntries)): Int => 1
          }
        }
        {
            trait TaskExtra {
                { x => x: A }
            }
        }
        class Parser {
          {() => }
        }

3)
    DESCRIPTION:
        problem with Type_ and Pattern1 rule
    CODE:
        object F{
          func{ case _: F => fail }
        }

4)?
    DESCRIPTION:
        отсутствуют скобки после @Singleton, НО в грамматике нет возможности не вывести скобки!!!
    CODE:
        {
            class GroupManager @Singleton @Inject() ()
        }
    DESCRIPTION:
        непохоже чтобы эти куски кода выводились в грамматике Scala
    CODE:
        object System {
                  def a[@b T[@b V]] = 1
                }
        object T{ @BP val x }
        class A { def fn = List apply[Int] 2 }
        class A{
            def x { implicit lazy val e:Int = 0 }
        }
        object X{
          object Y{var z = 1}
          Y z = 2
          case class Z(z: Int){case class X(x: Int){ var y = 1}}
          Z apply 1 X 2 y = 4

          a m "txt" t = 18; println("x")
          X x = 1 match {case _ => 2}
        }
        object X{ type x = {def t: Int = 1} }
        object Test{
                  t match { case Cell[a](x: Int) => () }
                }
        class T extends E with C(12);
5)
    DESCRIPTION:
        problem with =>
    CODE:
        {
        object O{
                val service = Service.mk { _: Request => Future.value(res) }
                val service2 = Service.mk { _ => Future.value(res) }
                }
        }
        
6)
    DESCRIPTION:
        underscore problem (такое вообще выводится?)
    CODE:
        class OptionLikeMatcher{ type A = _ \/ B }
        
7)
    /* FIXED */
    DESCRIPTION:
        из SimpleExpr выводится * .id поэтому в правиле [SimpleExpr '.'] id '=' Expr будут проблемы
    CODE:
        object L{ 
          a.b = c
          a().b = c
        }

8)
    /* FIXED */
    DESCRIPTION:
    CODE:
        object K{
          val omg_+ = 1
        }
        
.)
    DESCRIPTION:
        very very very poor performance
    CODE:
        object O {
            A(A(A(A())))
        }

9)  /* FIXED */
    DESCRIPTION:
        проблема с лексером из-за первого символа '_'
    CODE:
        import com.a.{ _ => _ }

        object ScopedVar {
                          def withScopedVars(ass: Seq[_]) = 1
                        }
10)
     CODE:
        class immutable { new ({val x = 1}) }
        class C{ x match {case a @ _ ** y => z} }
	
	/* FIXED */
        object Test{ t match { case Cell(x: Int) => () }   }
        все ок, если x заменить на _ - похоже какая то проблема с лексером
