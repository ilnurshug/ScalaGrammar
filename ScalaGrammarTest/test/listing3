{
object callccInterpreter {

  def interp(t: Term, e: Environment): M[Value] = t match { case Lam(x, t) => unitM(Fun(a => interp(t, Pair(x, a) :: e)))
    case App(f, t) => for (a <- interp(f, e);
			   b <- interp(t, e);
			   c <- apply(a, b))
		      yield c
  };

  def test(t: Term): String = showM(interp(t, List()));

  val term2 = Add(Con(1), Ccc("k", Add(Con(2), App(Var("k"), Con(4)))));
}
}
