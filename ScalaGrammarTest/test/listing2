{
    object lazyLib {

        // Delay the evaluation of an expression until it is needed.

        def delay[A](value: => A): Susp[A] = new SuspImpl[A](value)

        // Get the value of a delayed expression.
        implicit def force[A](s: Susp[A]): A = s()


        abstract class Susp[+A] extends Function0[A]


        class SuspImpl[A](lazyValue: => A) extends Susp[A] {
          private var maybeValue: Option[A] = None

          override def apply() = maybeValue match { case None =>
              val value = lazyValue
              maybeValue = Some(value)
              value
          case Some(value) =>
              value
          }

          override def toString() = maybeValue match { case None => "Susp(?)"
            case Some(value) => "Susp(" + value + ")"
          }
        }
    }

    def msort[A](less: (A, A) => Boolean)(xs: List[A]): List[A] = {
    	def merge(xs1: List[A], xs2: List[A]): List[A] = {
    		if (xs1.isEmpty) xs2
    		else if (xs2.isEmpty) xs1
    		else if (less(xs1.head, xs2.head)) xs1.head :: merge(xs1.tail, xs2)
    		else xs2.head :: merge(xs1, xs2.tail)
    	}
    	val n = xs.length/2
    	if (n == 0) xs
    	else merge(msort(less)(xs take n), msort(less)(xs drop n))
    }
}